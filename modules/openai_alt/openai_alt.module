<?php

/**
 * Implements hook_config_info().
 */
function openai_alt_config_info() {
  return [
    'openai_alt.settings' => [
      'label' => t('OpenAI Alt Settings'),
      'group' => t('Configuration'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function openai_alt_menu() {
  $items = [];

  $items['admin/config/openai/openai-alt'] = [
    'title' => 'OpenAI Alt Text Generation',
    'description' => 'Provides the possibility to fill out the alt text of an image field using OpenAI.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_alt_settings_form'],
    'access arguments' => ['administer site configuration'],
    'parent' => 'admin/config/openai',
  ];

  return $items;
}

/**
 * Build the configuration form for AI Image Alt Text.
 *
 * @return array
 *   The configuration form.
 */
function openai_alt_settings_form(array $form, array &$form_state) {
  // Get the configuration object to load values.
  $config = config('openai_alt.settings');

  $openai_config = config('openai.settings');
  $apiKey = key_get_key_value($openai_config->get('api_key'));

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return $form;
  }

  $api = new OpenAIApi($apiKey);

  $form = array();
  $form['#config'] = 'openai_alt.settings';

  // Retrieve configuration values.
  $prompt = $config->get('prompt');

  // Prompt for generating alt text.
  $form['prompt'] = [
    '#type' => 'textarea',
    '#title' => t('Alt text generation prompt'),
    '#default_value' => $prompt,
    '#description' => t('Prompt used for generating the alt text.'),
    '#required' => TRUE,
    '#rows' => 15, // Adjust the height of the textarea.
    '#cols' => 80, // Adjust the width of the textarea.
    '#attributes' => [
      'style' => 'white-space: pre-wrap;', // Ensure newlines and spaces are preserved.
    ],
  ];

  // Model section

  $models = $api->filterModels(['gpt-4o|gpt-4-turbo|vision']);

  $form['model'] = [
    '#type' => 'select',
    '#title' => t('Model to use'),
    '#options' => $models,
    '#default_value' => $config->get('model'),
    '#required' => TRUE,
    '#description' => t('AI model to use for generating the alt text.'),
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_element_info_alter().
 *
 * Alter the image field widget to include a "Generate Alt Text" button.
 */
function openai_alt_element_info_alter(&$types) {
  if (isset($types['managed_file'])) {
    $types['managed_file']['#process'][] = 'openai_alt_image_field_process';
  }
}

/**
 * Process function to wrap the alt text field and add the AI button.
 */
function openai_alt_image_field_process($element, &$form_state, $form) {
  if (isset($element['#value']['alt'])) {
    $field_name = $element['#field_name'] ?? 'unknown_field';
    $delta = $element['#delta'] ?? 0;
    //dpm($element);
    $original_prefix = $element['#prefix'] ?? ''; // Preserve the original prefix.
    $wrapper_id = 'ai-alt-field-wrapper-' . $field_name . '-' . $delta;

    // Add your custom wrapper while preserving the original prefix.
    $element['#prefix'] = $original_prefix . '<div id="' . $wrapper_id . '" class="ai-alt-field-wrapper">';
    $element['#suffix'] = '</div>' . ($element['#suffix'] ?? ''); // Ensure the original suffix is preserved.
    //dpm($element);
    // Add the "Generate Alt Text" button.
    $element['ai_alt_text_generation'] = [
      '#type' => 'button',
      '#value' => t('Generate Alt Text'),
      '#ajax' => [
        'callback' => 'openai_alt_generate_alt_text_ajax',
        'wrapper' => $wrapper_id, // Use your custom wrapper for updates.
      ],
      '#attributes' => [
        'class' => ['ai-alt-text-generation', 'button--primary'],
        'data-file-id' => $element['#value']['fid'] ?? NULL,
        'data-field-name' => $field_name,
        'data-delta' => $delta,
      ],
      '#weight' => -1.5, // Ensure the button appears after the alt field.
    ];
  }

  return $element;
}

/**
 * Implements hook_form_alter().
 */
function openai_alt_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'filter_format_editor_image_form') {
    // Ensure the 'alt' field exists.
    if (isset($form['alt'])) {
      // Add a unique ID to the `alt` field for AJAX targeting.
      $form['alt']['#prefix'] = '<div id="edit-alt-wrapper">';
      $form['alt']['#suffix'] = '</div>';

      // Add the "Generate with AI" button directly after the 'alt' field.
      $form['generate_with_ai'] = [
        '#type' => 'button',
        '#value' => t('Generate with AI'),
        '#ajax' => [
          'callback' => 'openai_alt_generate_alt_text_for_ckeditor',
          'wrapper' => 'edit-alt-wrapper', // Target only the `alt` field wrapper.
        ],
        '#attributes' => [
          'class' => ['ckeditor-ai-generate-button'],
        ],
      ];
    }
  }
}


/**
 * AJAX callback to generate alt text in CKEditor modal.
 */
function openai_alt_generate_alt_text_for_ckeditor($form, &$form_state) {
  // Retrieve the file ID (`fid`) from the form.
  $fid = $form['image']['fid']['#value']['fid'] ?? NULL;

  if (!$fid) {
    // Log and notify if no file ID is found.
    watchdog('openai_alt', 'No file ID (fid) found in the form.', [], WATCHDOG_WARNING);
    return [
      '#type' => 'ajax',
      '#commands' => [
        ajax_command_alert(t('Please upload or select an image before generating alt text.')),
      ],
    ];
  }

  // Load the file entity using the file ID.
  $file = file_load($fid);
  if (!$file) {
    backdrop_set_message(t('Failed to load the image file. Please try again.'), 'error');
    watchdog('openai_alt', 'Failed to load file with fid: @fid', ['@fid' => $fid], WATCHDOG_WARNING);
    return;
  }

  // Get the file URI.
  $file_uri = $file->uri;

  try {
    // Use the OpenAI API to generate alt text for the image.
    $openai_api = openai_alt_get_openai_api();
    $generated_alt_text = $openai_api->describeImage($file_uri);

    if (!empty($generated_alt_text)) {
      // Update the `alt` field's value with the generated alt text.
      $form['alt']['#value'] = $generated_alt_text;

      // Return an AJAX response to update only the `alt` field wrapper in the DOM.
      return [
        '#type' => 'ajax',
        '#commands' => [
          ajax_command_replace('#edit-alt-wrapper', backdrop_render($form['alt'])),
        ],
      ];
    }
    else {
      backdrop_set_message(t('Failed to generate alt text. Please try again.'), 'error');
    }
  }
  catch (Exception $e) {
    // Log the error and notify the user.
    watchdog('openai_alt', 'Error generating alt text: @error', ['@error' => $e->getMessage()], WATCHDOG_ERROR);
    return [
      '#type' => 'ajax',
      '#commands' => [
        ajax_command_alert(t('An error occurred while generating alt text.')),
      ],
    ];
  }

  // Fallback if something unexpected happens.
  return [
    '#type' => 'ajax',
    '#commands' => [
      ajax_command_alert(t('Failed to generate alt text. Please try again.')),
    ],
  ];
}

/**
 * AJAX callback for generating alt text using OpenAI.
 */
/**
 * AJAX callback for generating alt text using OpenAI.
 */
function openai_alt_generate_alt_text_ajax($form, &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $fid = $triggering_element['#attributes']['data-file-id'] ?? NULL;
  $field_name = $triggering_element['#attributes']['data-field-name'] ?? NULL;
  $delta = $triggering_element['#attributes']['data-delta'] ?? NULL;

  //dpm($triggering_element);

  if ($field_name === NULL || $delta === NULL) {
    backdrop_set_message(t('Unable to determine field context.'), 'error');
    return [
      '#type' => 'ajax',
      '#commands' => [
        ajax_command_alert(t('An error occurred while generating alt text. Please try again.')),
      ],
    ];
  }

  $file = file_load($fid); // Load the file entity using Backdrop's file_load().
  if (!$file) {
    backdrop_set_message(t('File not found for the given file ID.'), 'error');
    return;
  }

 // dpm($file);

  $file_uri = $file->uri;

  //dpm($file_uri);

  // Generate alt text using OpenAI API.
  //$generated_alt_text = 'Generated alt text'; // Replace with OpenAI API logic.

  // Get the OpenAIApi instance and describe the image.
  $openai_api = openai_alt_get_openai_api();
  $generated_alt_text = $openai_api->describeImage($file_uri);
  dpm($generated_alt_text);

  // Update the alt text value.
  $form[$field_name]['und'][$delta]['alt']['#value'] = $generated_alt_text;

  // Return the updated field.
  $wrapper_id = 'ai-alt-field-wrapper-' . $field_name . '-' . $delta;
  return [
    '#type' => 'ajax',
    '#commands' => [
      ajax_command_replace('#' . $wrapper_id, backdrop_render($form[$field_name]['und'][$delta])),
    ],
  ];
}


/**
 * Get an OpenAI API instance.
 *
 * @return OpenAIApi
 *   The OpenAI API instance.
 */
function openai_alt_get_openai_api() {
  static $openai_api;
  if (!$openai_api) {
    $api_key = key_get_key_value(config('openai.settings')->get('api_key'));
    if (empty($api_key)) {
      throw new Exception(t('API key for OpenAI is missing.'));
    }

    $openai_api = new OpenAIApi($api_key);
  }
  return $openai_api;
}
