<?php

/**
 * @file
 * Permissions for the OpenAI Audio module.
 */

function openai_audio_permission()
{
  return [
    'access openai audio' => [
      'title' => t('Use the OpenAI Audio module.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function openai_audio_menu()
{
  $items = [];

  $items['admin/config/openai/audio'] = [
    'title'            => 'OpenAI Audio',
    'description'      => 'Contains a form where you can test the OpenAI API\'s audio (speech to text) endpoints.',
    'page callback'    => 'backdrop_get_form',
    'page arguments'   => ['openai_audio_form'],
    'access callback'  => 'user_access',
    'access arguments' => ['access openai audio'],
    'parent'           => 'admin/config/openai',
  ];

  return $items;
}

/**
 * Implements the OpenAI ChatGPT form.
 */
function openai_audio_form($form, &$form_state) {
  $form['audio'] = [
    '#type' => 'textarea',
    '#title' => t('Audio file path'),
    '#rows' => 1,
    '#description' => t('The absolute path to the audio file. Maximum file size 25 MB. Allowed file types: mp3, mp4, mpeg, mpga, m4a, wav, and webm.'),
    '#required' => TRUE,
  ];

  $form['task'] = [
    '#type' => 'select',
    '#title' => t('Task'),
    '#options' => [
      'transcribe' => 'Transcribe',
      'translate' => 'Translate',
    ],
    '#default_value' => 'transcribe',
    '#description' => t('The task to use to process the audio file. "Transcribe": transcribes the audio to the same language as the audio. "Translate": translates and transcribes the audio into English. See the <a href=":link">speech to text guide</a> for further details.', ['@link' => 'https://platform.openai.com/docs/guides/speech-to-text']),
  ];

  $form['response'] = [
    '#type' => 'textarea',
    '#title' => t('Response'),
    '#attributes' => [
      'readonly' => 'readonly',
    ],
    '#prefix' => '<div id="openai-audio-response">',
    '#suffix' => '</div>',
    '#description' => t('The response from OpenAI will appear in the textarea above.'),
  ];

  $form['actions'] = [
    '#type' => 'actions',
  ];

  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => [
      'callback' => 'openai_audio_get_response',
      'wrapper' => 'openai-audio-response',
      'progress' => [
        'type' => 'throbber',
      ],
    ],
  ];

  return $form;
}

/**
 * Ajax callback for submitting the form.
 */
function openai_audio_get_response($form, &$form_state) {
  // Safely check if 'storage' is set and contains the text.
  if (!empty($form_state['storage']['text'])) {
    $response_text = $form_state['storage']['text'];
  } else {
    $response_text = t('No response was provided.');
  }

  // Set the response text directly into the form element with proper formatting.
  $form['response']['#value'] = filter_xss($response_text); // Allow basic formatting.

  return $form['response'];
}



/**
 * Form submission handler for the OpenAI Audio form in Backdrop CMS.
 */
function openai_audio_form_submit($form, &$form_state) {
  $openai_config = config('openai.settings');
  $apiKey = key_get_key_value($openai_config->get('api_key'));

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return $form;
  }

  $api = new OpenAIApi($apiKey);
  $audio = $form_state['values']['audio'];
  $task = $form_state['values']['task'];

  // Log API call attempt.
  watchdog('openai_audio', 'Attempting speech-to-text conversion for audio file.', [], WATCHDOG_INFO);

  try {
    $result = $api->speechToText('whisper-1', $audio, $task);
    $form_state['storage']['text'] = $result;

    // Log successful response.
    watchdog('openai_audio', 'Received response: @result', ['@result' => $result], WATCHDOG_INFO);
  } catch (Exception $e) {
    watchdog('openai_audio', 'Error in processing audio: @message', ['@message' => $e->getMessage()], WATCHDOG_ERROR);
    form_set_error('', t('An error occurred while processing the audio: @message', ['@message' => $e->getMessage()]));
  }

  $form_state['rebuild'] = TRUE;
}
