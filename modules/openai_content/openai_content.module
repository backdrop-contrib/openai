<?php
/**
 * @file
 * Permissions for the OpenAI Content module.
 */

function openai_content_permission() {
  return [
    'access openai content tools' => [
      'title' => t('Permit access to using content tools provided by the OpenAI Content module.'),
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for node forms.
 */
function openai_content_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (user_access('access openai content tools')) {
    $entity = $form['#node'];
    $options = _openai_content_get_all_text_with_summary_fields($entity);
    $options = array_intersect_key($options, $form);

    $form['openai_moderate'] = [
      '#type' => 'fieldset',
      '#title' => t('Analyze text'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['openai_moderate']['target_field'] = [
      '#type' => 'select',
      '#title' => t('Choose field'),
      '#description' => t('Select what field you would like to analyze.'),
      '#options' => $options,
    ];

    $form['openai_moderate']['response'] = [
      '#type' => 'markup',
      '#markup' => t('OpenAI can analyze content and tell you what <a href=":link" target="_blank">content policies it may violate</a>. This is beneficial if your audience are certain demographics and sensitive to certain categories. Note that this is only a useful guide.', ['@link' => 'https://platform.openai.com/docs/guides/moderation/overview']),
      '#prefix' => '<div id="openai-moderate-response">',
      '#suffix' => '</div>',
    ];

    $form['openai_moderate']['do_moderate'] = [
      '#type' => 'button',
      '#value' => t('Analyze'),
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'openai_content_entity_analyze_content',
        'wrapper' => 'openai-moderate-response',
        'effect' => 'fade',
      ],
    ];

    $form['openai_tone_edit'] = [
      '#type' => 'fieldset',
      '#title' => t('Adjust content tone'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['openai_tone_edit']['message'] = [
      '#markup' => t('Have OpenAI check your content and adjust the tone of it for different reader audiences for you.'),
    ];

    $form['openai_tone_edit']['target_field'] = [
      '#type' => 'select',
      '#title' => t('Choose field'),
      '#description' => t('Select what field you would like to change the tone of.'),
      '#options' => $options,
    ];

    $form['openai_tone_edit']['tone'] = [
      '#type' => 'select',
      '#title' => t('Choose tone'),
      '#description' => t('Selecting one of the options will adjust/reword the body content to be appropriate for the target audience.'),
      '#options' => [
        'friendly' => t('Friendly'),
        'professional' => t('Professional'),
        'helpful' => t('Helpful'),
        'easier for a high school educated reader' => t('High school level reader'),
        'easier for a college educated reader' => t('College level reader'),
        'explained to a five year old' => t('Explain like I\'m 5'),
      ],
    ];

    $form['openai_tone_edit']['response'] = [
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<br /><div id="openai-tone-edit-response">',
      '#suffix' => '</div>',
    ];

    $form['openai_tone_edit']['edit'] = [
      '#type' => 'button',
      '#value' => t('Adjust tone'),
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'openai_content_entity_adjust_tone',
        'wrapper' => 'openai-tone-edit-response',
        'effect' => 'fade',
      ],
    ];

    $form['openai_summarize'] = [
      '#type' => 'fieldset',
      '#title' => t('Summarize text'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['openai_summarize']['target_field'] = [
      '#type' => 'select',
      '#title' => t('Choose field'),
      '#description' => t('Select what field you would like to create a summary from.'),
      '#options' => $options,
    ];

    $form['openai_summarize']['response'] = [
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<div id="openai-summarize-response">',
      '#suffix' => '</div>',
    ];

    $form['openai_summarize']['do_summarize'] = [
      '#type' => 'button',
      '#value' => t('Summarize'),
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'openai_content_entity_field_summarize',
        'wrapper' => 'openai-summarize-response',
        'effect' => 'fade',
      ],
    ];

    $form['openai_suggest_title'] = [
      '#type' => 'fieldset',
      '#title' => t('Suggest content title'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['openai_suggest_title']['target_field'] = [
      '#type' => 'select',
      '#title' => t('Choose field'),
      '#description' => t('Select what field you would like to use.'),
      '#options' => $options,
    ];

    $form['openai_suggest_title']['response'] = [
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<div id="openai-suggest-title-response">',
      '#suffix' => '</div>',
    ];

    $form['openai_suggest_title']['do_suggest_title'] = [
      '#type' => 'button',
      '#value' => t('Suggest title'),
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'openai_content_suggest_title',
        'wrapper' => 'openai-suggest-title-response',
        'effect' => 'fade',
      ],
    ];

    $form['openai_suggest'] = [
      '#type' => 'fieldset',
      '#title' => t('Suggest taxonomy'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];

    $form['openai_suggest']['target_field'] = [
      '#type' => 'select',
      '#title' => t('Choose field'),
      '#description' => t('Select what field you would like to suggest taxonomy from.'),
      '#options' => $options,
    ];

    $form['openai_suggest']['response'] = [
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<div id="openai-suggest-response">',
      '#suffix' => '</div>',
    ];

    $form['openai_suggest']['do_suggest'] = [
      '#type' => 'button',
      '#value' => t('Suggest taxonomy'),
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'openai_content_entity_suggest_taxonomy',
        'wrapper' => 'openai-suggest-response',
        'effect' => 'fade',
      ],
    ];
  }
}

/**
 * Get a list of all string and text fields on the current node.
 *
 * @param object $entity
 *   The content entity on the form.
 *
 * @return array
 *   List of all valid field options.
 */
function _openai_content_get_all_text_with_summary_fields($entity) {
  $fields = field_info_instances('node', $entity->type);
  $options = [];

  foreach ($fields as $field_name => $field_info) {
    $field = field_info_field($field_name);
    if (in_array($field['type'], ['text_with_summary', 'text_long', 'text', 'string_long'])) {
      if (in_array($field_name, ['revision_log', 'revision_log_message'])) {
        continue;
      }
      $options[$field_name] = $field_info['label'];
    }
  }

  asort($options);
  return $options;
}


/**
 * The AJAX callback for adjusting the tone of body content.
 *
 * @param array $form
 *   The entity form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The renderable part of the form.
 */
function openai_content_entity_adjust_tone($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (isset($form_state['values']['target_field'])) {
    $target_field = $form_state['values']['target_field'];

    if (isset($form_state['values'][$target_field][LANGUAGE_NONE][0]['value'])) {
      $target_field_value = $form_state['values'][$target_field][LANGUAGE_NONE][0]['value'];
      $tone = $form_state['values']['openai_tone_edit']['tone'];

      if (!empty($target_field_value)) {
        $client = new OpenAIApi($apiKey);
        $truncated_value = StringHelper::prepareText($target_field_value, [], 3900);

        try {
          $response = $client->chat(
            'gpt-3.5-turbo',
            [
              ['role' => 'user', 'content' => 'Change the tone of the following text to be ' . $tone . ' using the same language as the following text:\r\n"' . $truncated_value . '"']
            ],
            0.7,
            2048
          );

          // Check if the response is a string and handle accordingly
          if (is_string($response)) {
            $text = trim($response);
          } else {
            $result = json_decode($response, TRUE);
            $text = isset($result["choices"][0]["message"]["content"]) ? trim($result["choices"][0]["message"]["content"]) : t('No result could be generated.');
          }
        } catch (Exception $e) {
          backdrop_set_message('Error: ' . $e->getMessage(), 'error');
          $text = t('An error occurred while processing your request.');
        }
      } else {
        $text = t('The @field field has no text. Please supply content to the @field field.', ['@field' => $target_field]);
      }
    } else {
      $text = t('The selected field does not have a value.');
    }
  } else {
    $text = t('No field selected for tone adjustment.');
  }

  $form['openai_tone_edit']['response']['#markup'] = $text;
  return $form['openai_tone_edit']['response'];
}

/**
 * The AJAX callback for summarizing a field.
 *
 * @param array $form
 *   The entity form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The renderable part of the form.
 */
function openai_content_entity_field_summarize($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (isset($form_state['values']['target_field'])) {
    $target_field = $form_state['values']['target_field'];

    if (isset($form_state['values'][$target_field][LANGUAGE_NONE][0]['value'])) {
      $target_field_value = $form_state['values'][$target_field][LANGUAGE_NONE][0]['value'];

      if (!empty($target_field_value)) {
        $client = new OpenAIApi($apiKey);
        $truncated_value = StringHelper::prepareText($target_field_value, [], 3900);

        try {
          $response = $client->chat(
            'gpt-3.5-turbo',
            [
              ['role' => 'user', 'content' => 'Create a detailed summary of the following text in less than 130 words using the same language as the following text:\r\n"' . $truncated_value . '"']
            ],
            0.7,
            2048
          );

          // Check if the response is a string and handle accordingly
          if (is_string($response)) {
            $text = trim($response);
          } else {
            $result = json_decode($response, TRUE);
            $text = isset($result["choices"][0]["message"]["content"]) ? trim($result["choices"][0]["message"]["content"]) : t('No result could be generated.');
          }
        } catch (Exception $e) {
          backdrop_set_message('Error: ' . $e->getMessage(), 'error');
          $text = t('An error occurred while processing your request.');
        }
      } else {
        $text = t('The @field field has no text. Please supply content to the @field field.', ['@field' => $target_field]);
      }
    } else {
      $text = t('The selected field does not have a value.');
    }
  } else {
    $text = t('No field selected for summarization.');
  }

  $form['openai_summarize']['response']['#markup'] = $text;
  return $form['openai_summarize']['response'];
}

/**
 * The AJAX callback for suggesting a title.
 *
 * @param array $form
 *   The entity form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The renderable part of the form.
 */
function openai_content_suggest_title($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (isset($form_state['values']['target_field'])) {
    $target_field = $form_state['values']['target_field'];

    if (isset($form_state['values'][$target_field][LANGUAGE_NONE][0]['value'])) {
      $target_field_value = $form_state['values'][$target_field][LANGUAGE_NONE][0]['value'];

      if (!empty($target_field_value)) {
        $client = new OpenAIApi($apiKey);
        $truncated_value = StringHelper::prepareText($target_field_value, [], 3900);

        try {
          $response = $client->chat(
            'gpt-3.5-turbo',
            [
              ['role' => 'user', 'content' => 'Suggest an SEO friendly title for this page based off of the following content in 10 words or less, in the same language as the input:\r\n"' . $truncated_value . '"']
            ],
            0.4,
            2048
          );

          // Check if the response is a string and handle accordingly
          if (is_string($response)) {
            $text = trim($response);
          } else {
            $result = json_decode($response, TRUE);
            $text = isset($result["choices"][0]["message"]["content"]) ? trim($result["choices"][0]["message"]["content"]) : t('No title could be generated from the provided input.');
          }
        } catch (Exception $e) {
          backdrop_set_message('Error: ' . $e->getMessage(), 'error');
          $text = t('An error occurred while processing your request.');
        }
      } else {
        $text = t('The @field field has no text. Please supply content to the @field field.', ['@field' => $target_field]);
      }
    } else {
      $text = t('The selected field does not have a value.');
    }
  } else {
    $text = t('No field selected for title suggestion.');
  }

  $form['openai_suggest_title']['response']['#markup'] = $text;
  return $form['openai_suggest_title']['response'];
}


/**
 * The AJAX callback for suggesting taxonomy.
 *
 * @param array $form
 *   The entity form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The renderable part of the form.
 */
function openai_content_entity_suggest_taxonomy($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (isset($form_state['values']['target_field'])) {
    $target_field = $form_state['values']['target_field'];

    if (isset($form_state['values'][$target_field][LANGUAGE_NONE][0]['value'])) {
      $target_field_value = $form_state['values'][$target_field][LANGUAGE_NONE][0]['value'];

      if (!empty($target_field_value)) {
        $client = new OpenAIApi($apiKey);
        $truncated_value = StringHelper::prepareText($target_field_value, [], 3900);

        try {
          $response = $client->chat(
            'gpt-3.5-turbo',
            [
              ['role' => 'user', 'content' => 'Suggest five words to classify the following text using the same language as the input text. The words must be nouns or adjectives in a comma delimited list:\r\n"' . $truncated_value . '"']
            ],
            0.4,
            2048
          );

          // Check if the response is a string and handle accordingly
          if (is_string($response)) {
            $text = trim($response);
          } else {
            $result = json_decode($response, TRUE);
            $text = isset($result["choices"][0]["message"]["content"]) ? trim($result["choices"][0]["message"]["content"]) : t('No terms could be generated from the provided input.');
          }
        } catch (Exception $e) {
          $text = t('An error occurred while processing your request.');
        }
      } else {
        $text = t('The @field field has no text. Please supply content to the @field field.', ['@field' => $target_field]);
      }
    } else {
      $text = t('The selected field does not have a value.');
    }
  } else {
    $text = t('No field selected for suggestion.');
  }

  $form['openai_suggest']['response']['#markup'] = $text;
  return $form['openai_suggest']['response'];
}

/**
 * The AJAX callback for analyzing content.
 *
 * @param array $form
 *   The entity form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The renderable part of the form.
 */
function openai_content_entity_analyze_content($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (isset($form_state['values']['target_field'])) {
    $target_field = $form_state['values']['target_field'];

    if (isset($form_state['values'][$target_field][LANGUAGE_NONE][0]['value'])) {
      $target_field_value = $form_state['values'][$target_field][LANGUAGE_NONE][0]['value'];

      if (!empty($target_field_value)) {
        $client = new OpenAIApi($apiKey);
        $truncated_value = StringHelper::prepareText($target_field_value, [], 8000);

        try {
          $result = $client->moderation($truncated_value);

          // Check if the response contains flagged content
          $flagged = (bool) $result["results"][0]["flagged"];
          $content = [];

          $content['results'] = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#items' => [],
            '#empty' => t('The text does not violate any content policies noted by OpenAI/ChatGPT.'),
          ];

          if ($flagged) {
            $content['heading'] = [
              '#markup' => '<p>' . t('Violation(s) found for these categories:') . '</p>',
            ];

            $violated_categories = array_filter($result['results'][0]['categories']);

            foreach ($violated_categories as $category => $did_violate) {
              if ($did_violate) {
                $content['results']['#items'][] = Unicode::ucfirst($category);
              }
            }
          }

          // Ensure content is sorted before rendering
          asort($content);

          // Render the content to output
          $output = render($content);

        } catch (Exception $e) {
          backdrop_set_message('Error: ' . $e->getMessage(), 'error');
          $output = t('An error occurred while processing your request.');
        }
      } else {
        $output = t('The @field field has no text. Please supply content to the @field field.', ['@field' => $target_field]);
      }
    } else {
      $output = t('The selected field does not have a value.');
    }
  } else {
    $output = t('No field selected for analysis.');
  }

  $form['openai_moderate']['response']['#markup'] = $output;
  return $form['openai_moderate']['response'];
}



















