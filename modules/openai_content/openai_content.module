<?php

/**
 * @file
 * Contains hook implementations for this module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_alter().
 */
function openai_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (preg_match('/node_(add|.*_edit)_form/', $form_id)) {
    $config = \Drupal::config('openai_embeddings.settings');
    $entity_types = $config->get('entity_types');
    $entity = $form_state->getFormObject()->getEntity();

    if (!empty($entity_types) && array_key_exists($entity->getEntityTypeId(), $entity_types)) {
      if (in_array($entity->bundle(), $entity_types[$entity->getEntityTypeId()])) {
        // Add a title similarity checker
        $form['title']['#weight'] = -10;
        $form['title']['widget'][0]['#weight'] = -10;

        $form['actions']['title_check'] = [
          '#type' => 'button',
          '#value' => t('Check for similar titles'),
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'openai_content_node_title_check',
            'wrapper' => 'openai-title-check-response',
          ],
          '#weight' => 5,
        ];

        $form['title']['widget'][]['title_check_response'] = [
          '#type' => 'markup',
          '#prefix' => '<div id="openai-title-check-response">',
          '#suffix' => '</div>',
          '#weight' => -9,
        ];
      }
    }
  }
}

/**
 * The AJAX callback for running a semantic similarity search on the title.
 *
 * @param array $form
 *   The node form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The HTML response.
 */
function openai_content_node_title_check(array &$form, FormStateInterface $form_state) {
  $title = $form_state->getValue('title')[0]['value'];
  $form_entity = $form_state->getFormObject()->getEntity();

  if (!empty($title)) {
    $client = \Drupal::service('openai.client');
    $pinecone = \Drupal::service('openai_embeddings.pinecone_client');
    $embedding = [];

    if ($form_entity instanceof NodeInterface and $form_entity->id()) {
      $query_result = \Drupal::database()->query('SELECT entity_id, embedding FROM {openai_embeddings} WHERE entity_id = :entity_id AND field_name = :field_name LIMIT 1',
        [
          ':entity_id' => $form_entity->id(),
          ':field_name' => 'title'
        ]
      )->fetchAssoc();

      $embedding = json_decode($query_result['embedding'])->data;
    } else {
      $response = $client->embeddings()->create([
        'model' => 'text-embedding-ada-002',
        'input' => strip_tags(trim($title)),
      ]);

      $embeddings = $response->toArray();
      $embedding = $embeddings["data"][0]["embedding"];
    }

    $response = $pinecone->query(
      $embedding,
      5,
      TRUE,
      FALSE,
      [
        'field_name' => 'title',
        'entity_type' => 'node',
      ],
      'node:title'
    );

    $result = json_decode($response->getBody()->getContents());
    $output = '<ul>';
    $tracked = [];

    foreach ($result->matches as $match) {
      if ($match->score < .80) {
        continue;
      }

      $entity = \Drupal::entityTypeManager()->getStorage($match->metadata->entity_type)->load($match->metadata->entity_id);

      if ($form_entity instanceof NodeInterface and $form_entity->id() == $entity->id()) {
        continue;
      }

      $output .= '<li>' . $entity->toLink()->toString() . ' (relevancy score: ' . $match->score . ')</li>';
      $tracked[] = $entity->id();
    }

    $output .= '</ul>';

    if (empty($tracked)) {
      $output = '<p>No similar titles were found, or results were excluded because they did not meet the relevancy score threshold.</p>';
    } else {
      $heading = '<p><strong>Similarity Results</strong></p>';
      $heading .= '<p>The following nodes have titles similar to the one you are using. You may want to consider adjusting this title so it is not as similar for search engine optimization reasons.</p>';
      $output = $heading . $output;
    }

    $response = new AjaxResponse();
    $response->addCommand(new HtmlCommand('#openai-title-check-response', $output));
    return $response;
  }
}
