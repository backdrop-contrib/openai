<?php

/**
 * Implements hook_config_info().
 */
function openai_dblog_config_info() {
  $prefixes['openai_dblog.settings'] = array(
    'label' => t('OpenAI dblog Settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_autoload_info().
 */
function openai_dblog_autoload_info() {
  return [
    'OpenAIDbLog' => 'includes/OpenAIDbLog.inc',
  ];
}

/**
 * Implements hook_menu().
 */
function openai_dblog_menu() {
  $items = [];

  $items['admin/config/openai/openai-dblog/settings'] = [
    'title' => 'Log analyzer settings',
    'description' => 'Manage OpenAI log analyzer settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_dblog_settings_form'],
    'access arguments' => ['administer site configuration'],
    'parent' => 'admin/config/openai',
  ];

  return $items;
}

/**
 * Form builder function for OpenAI log analyzer settings.
 */
function openai_dblog_settings_form($form, &$form_state) {
  // Load the OpenAI dblog settings.
  $config = config_get('openai_dblog.settings');

  // Load OpenAI API key from the Key module.
  $apiKey = key_get_key_value(config('openai.settings')->get('api_key'));

  // Validate the API key.
  if (empty($apiKey)) {
    form_set_error('', t('The API key could not be retrieved. Please ensure it is configured correctly in the Key module.'));
    return $form;
  }

  // Initialize the OpenAI API client.
  $api = new OpenAIApi($apiKey);

  // Watchdog severity levels.
  $levels = watchdog_severity_levels();
  $options = [];
  foreach ($levels as $key => $label) {
    $options[$label] = $label; // Use the name of the level as both key and label.
  }

  // Prepare default values for the levels.
  $selected_levels = $config['levels'] ?? [];
  $default_levels = [];
  foreach ($options as $key => $label) {
    $default_levels[$key] = in_array($key, $selected_levels) ? $key : 0;
  }

  $form['levels'] = [
    '#type' => 'checkboxes',
    '#title' => t('Log level(s) to analyze'),
    '#options' => $options,
    '#default_value' => $default_levels,
    '#description' => t('Select which log levels should be analyzed when viewed. Non-error levels like notice and debug may cause wasted API usage.'),
  ];

  // Fetch models from the OpenAI API.
  try {
    $models = $api->filterModels(['gpt', 'text']);
    $model_options = [];
    foreach ($models as $model) {
      $model_options[$model] = $model;
    }
  } catch (Exception $e) {
    watchdog(
      'openai',
      'Failed to fetch models: @message',
      ['@message' => $e->getMessage()],
      WATCHDOG_ERROR
    );
    $model_options = [];
  }

  $form['model'] = [
    '#type' => 'select',
    '#title' => t('Model to use'),
    '#options' => $model_options,
    '#default_value' => $config['model'] ?? '',
    '#description' => t('Select which model to use to analyze text. See the <a href="@link">model overview</a> for details about each model.', ['@link' => 'https://platform.openai.com/docs/models/overview']),
  ];

  // Add the submit button.
  $form['actions'] = [
    '#type' => 'actions',
  ];
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  ];

  // Add the submit callback.
  $form['#submit'][] = 'openai_dblog_settings_form_submit';

  return $form;
}

/**
 * Form submission handler for openai_dblog_settings_form.
 */
function openai_dblog_settings_form_submit($form, &$form_state) {
  // Get the selected levels by filtering the form values.
  $selected_levels = array_filter($form_state['values']['levels']);

  // Save the selected levels as names.
  config_set('openai_dblog.settings', 'levels', array_keys($selected_levels));

  // Save the selected model.
  config_set('openai_dblog.settings', 'model', $form_state['values']['model']);

  backdrop_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_menu_alter().
 */
function openai_dblog_menu_alter(&$items) {
  // Override the dblog event page callback.
  if (isset($items['admin/reports/event/%'])) {
    $items['admin/reports/event/%']['page callback'] = 'openai_dblog_event_details';
  }
}
function openai_dblog_event_details($id) {
  // No need for require_once if autoload is set up correctly
  // require_once BACKDROP_ROOT . '/' . drupal_get_path('module', 'openai_dblog') . '/includes/OpenAIDbLog.inc';

  $severity = watchdog_severity_levels();
  $result = db_query('SELECT w.*, u.name, w.uid FROM {watchdog} w LEFT JOIN {users} u ON w.uid = u.uid WHERE w.wid = :id', array(':id' => $id))->fetchObject();
  if ($dblog = $result) {
    if (!empty($dblog->uid) && empty($dblog->name)) {
      $user_label = t('User ID (deleted)');
      $user_info = $dblog->uid;
    }
    else {
      $user_label = t('User');
      $user_info = theme('username', array('account' => $dblog));
    }

    $rows = array(
      array(
        array('data' => t('Type'), 'header' => TRUE),
        t($dblog->type),
      ),
      array(
        array('data' => t('Date'), 'header' => TRUE),
        format_date($dblog->timestamp, 'long'),
      ),
      array(
        array('data' => $user_label, 'header' => TRUE),
        $user_info,
      ),
      array(
        array('data' => t('Location'), 'header' => TRUE),
        l($dblog->location, $dblog->location),
      ),
      array(
        array('data' => t('Referrer'), 'header' => TRUE),
        l($dblog->referer, $dblog->referer),
      ),
      array(
        array('data' => t('Message'), 'header' => TRUE),
        dblog_format_message($dblog),
      ),
      array(
        array('data' => t('Severity'), 'header' => TRUE),
        $severity[$dblog->severity],
      ),
      array(
        array('data' => t('Hostname'), 'header' => TRUE),
        check_plain($dblog->hostname),
      ),
      array(
        array('data' => t('Operations'), 'header' => TRUE),
        $dblog->link,
      ),
    );

    // Instantiate the OpenAIDbLog class
    $openai_dblog = new OpenAIDbLog();
    $explanation = $openai_dblog->processExplanation($dblog);

    // Add the OpenAI explanation row
    $rows[] = array(
      array(
        'data' => t('Explanation<br><span style="font-size: smaller;">powered by <a href="@link">OpenAI</a></span>', ['@link' => 'https://openai.com']),
        'header' => TRUE,
      ),
      array('data' => $explanation),
    );

    $build['dblog_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#attributes' => array('class' => array('dblog-event')),
    );

    return $build;
  }
  else {
    return '';
  }
}



