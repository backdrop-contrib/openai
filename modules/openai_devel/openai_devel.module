<?php

/**
 * Implements hook_menu().
 */
function openai_devel_menu() {
  $items = [];

  $items['admin/devel/generate/content-gpt'] = [
    'title' => 'Generate content from ChatGPT',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_devel_generate_content_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['admin/devel/generate/content-gpt'] = [
    'title' => 'Generate nodes (ChatGPT)',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_devel_generate_content_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_LOCAL_TASK,
  ];

  return $items;
}

/**
 * Form for generating content using OpenAI's GPT services.
 */
function openai_devel_generate_content_form($form, &$form_state) {

  $openai_config = config('openai.settings');
  $apiKey = key_get_key_value($openai_config->get('api_key'));

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return $form;
  }

  $api = new OpenAIApi($apiKey);
  $models = $api->filterModels(['gpt']);

  // OpenAI settings.
  $form['openai_model'] = [
    '#type' => 'select',
    '#title' => t('Model'),
    '#options' => $models,
    '#default_value' => 'gpt-3.5-turbo',
    '#description' => t('Select which model to use to generate text.'),
    '#required' => TRUE,
  ];
  $form['openai_system'] = [
    '#type' => 'textarea',
    '#title' => t('Profile'),
    '#default_value' => 'Your task is to generate content. I would like you to generate content about various topics.',
    '#description' => t('The "system profile" helps set the behavior of the ChatGPT response.'),
    '#required' => TRUE,
  ];

  $form['openai_temperature'] = [
    '#type' => 'number',
    '#title' => t('Temperature'),
    '#min' => 0,
    '#max' => 2,
    '#step' => .1,
    '#default_value' => '0.7',
    '#description' => t('Sampling temperature to use, between 0 and 2. Higher values make output more random.'),
  ];

  $form['openai_max_tokens'] = [
    '#type' => 'number',
    '#title' => t('Max tokens'),
    '#min' => 1,
    '#default_value' => '512',
    '#description' => t("The maximum number of tokens to generate in the response."),
  ];

  $form['openai_html'] = [
    '#type' => 'checkbox',
    '#title' => t('HTML formatted'),
    '#default_value' => FALSE,
    '#description' => t('If TRUE, OpenAI will format the replies in basic HTML.'),
  ];

  // Adding original devel_generate fields
  $options = array();
  $types = node_type_get_types();
  $suffix = '';
  foreach ($types as $type) {
    if (module_exists('comment')) {
      $default = $type->settings['comment_default'];
      $map = array(t('Hidden'), t('Closed'), t('Open'));
      $suffix = ' <small>('. t('Comments: ') . $map[$default]. ')</small>';
    }
    $options[$type->type] = t($type->name) . $suffix;
  }

  if (empty($options)) {
    backdrop_set_message(t('You do not have any content types that can be generated. <a href="@create-type">Go create a new content type</a> already!</a>', array('@create-type' => url('admin/structure/types/add'))), 'error', FALSE);
    return $form;
  }

  $form['node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => $options,
    '#default_value' => array_keys($options),
  );
  if (module_exists('checkall')) $form['node_types']['#checkall'] = TRUE;

  $form['kill_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all content</strong> in these content types before generating new content.'),
    '#default_value' => FALSE,
  );

  $form['num_nodes'] = array(
    '#type' => 'number',
    '#title' => t('How many nodes would you like to generate?'),
    '#default_value' => 15,
    '#min' => 1,
    '#max' => 999999,
  );

  $options = array(1 => t('Now'));
  foreach (array(3600, 86400, 604800, 2592000, 31536000) as $interval) {
    $options[$interval] = format_interval($interval, 1) . ' ' . t('ago');
  }
  $form['time_range'] = array(
    '#type' => 'select',
    '#title' => t('How far back in time should the nodes be dated?'),
    '#description' => t('Node creation dates will be distributed randomly from the current time, back to the selected time.'),
    '#options' => $options,
    '#default_value' => 31536000,
  );

  $form['max_comments'] = array(
    '#type' => module_exists('comment') ? 'number' : 'value',
    '#title' => t('Maximum number of comments per node.'),
    '#description' => t('Only content types that have comments enabled will receive comments. Note that some nodes will randomly receive zero comments. Some will receive the max.'),
    '#default_value' => 0,
    '#min' => 0,
    '#max' => 99999,
    '#access' => module_exists('comment'),
  );

  $form['title_length'] = [
    '#type' => 'number',
    '#title' => t('Maximum number of words in titles'),
    '#default_value' => 4,
    '#min' => 1,
    '#max' => 100,
    '#description' => t('Set the maximum number of words for generated titles.'),
  ];

  $form['add_alias'] = array(
    '#type' => 'checkbox',
    '#disabled' => !module_exists('path'),
    '#description' => t('Content types will use the default patterns when generated. Checking this box will add a custom alias to all content types that do not have a pattern specified.'),
    '#title' => t('Ensure all content has a URL alias.'),
    '#default_value' => FALSE,
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $languages = language_list(TRUE);
    foreach ($languages as $language) {
      $options[$language->langcode] = $language->name;
    }
  }
  $form['add_language'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Set language on nodes'),
    '#multiple' => TRUE,
    '#access' => module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Form submission handler.
 */
function openai_devel_generate_content_form_submit($form, &$form_state) {
  $options = [
    'node_types' => array_filter($form_state['values']['node_types']),
    'num_nodes' => $form_state['values']['num_nodes'],
    'system' => $form_state['values']['openai_system'],
    'model' => $form_state['values']['openai_model'],
    'temperature' => $form_state['values']['openai_temperature'],
    'max_tokens' => $form_state['values']['openai_max_tokens'],
    'add_alias' => $form_state['values']['add_alias'],
    'max_comments' => $form_state['values']['max_comments'],
    'time_range' => $form_state['values']['time_range'],
    'languages' => array_filter($form_state['values']['add_language']),
    'title_length' => $form_state['values']['title_length'],
  ];

  // Handle content deletion if selected.
  if ($form_state['values']['kill_content']) {
    $nids = db_query("SELECT nid FROM {node} WHERE type IN (:types)", [':types' => $options['node_types']])->fetchCol();
    if ($nids) {
      node_delete_multiple($nids);
      backdrop_set_message(t('Deleted @count nodes.', ['@count' => count($nids)]));
    }
  }
  // Generate content.
  $total_created = openai_devel_generate_content($options);

  backdrop_set_message(t('Created @count nodes.', ['@count' => $total_created]));
}


/**
 * Generates content using OpenAI.
 */
function openai_devel_generate_content($options) {
  $config = config_get('openai.settings');
  $apiKey = key_get_key_value($config['api_key']);
  $api = new OpenAIApi($apiKey);

  $node_types = $options['node_types'] ?? [];
  $system = $options['system'] ?? '';
  $model = $options['model'] ?? 'gpt-3.5-turbo';
  $temperature = $options['temperature'] ?? 0.7;
  $max_tokens = $options['max_tokens'] ?? 512;
  $add_alias = $options['add_alias'] ?? FALSE;
  $num_nodes = $options['num_nodes'] ?? 1;
  $max_comments = $options['max_comments'] ?? 0;
  $time_range = $options['time_range'] ?? 0;
  $languages = $options['languages'] ?? [];
  $title_length = $options['title_length'] ?? 4;

  $total_created = 0;

  foreach ($node_types as $type) {
    for ($i = 0; $i < $num_nodes; $i++) {
      try {
        // Include title length in the prompt for OpenAI.
        $system_message = $system . " Generate unique content for type '$type'. The title should have approximately $title_length words and should not include the word 'title'.";
        $unique_prompt = "Generate unique and relevant content for a '{$type}' node. The title should be $title_length words and must not include the word 'title'.
            Ensure the content is engaging and contains several paragraphs. Incorporate specific details or examples to make it stand out.
            Make this one distinct from any others by focusing on a specific perspective, historical detail, or novel idea.";

        $response = $api->chat(
          $model,
          [
            ['role' => 'system', 'content' => $system_message],
            ['role' => 'user', 'content' => $unique_prompt],
          ],
          $temperature,
          $max_tokens
        );

        list($title, $body) = openai_devel_extract_title_and_body($response);


        // Set language for the node.
        $langcode = LANGUAGE_NONE;
        if (!empty($languages)) {
          $langcode = array_rand($languages);
        }

        // Create node.
        $node = new Node([
          'type' => $type,
          'title' => $title,
          'body' => [
            $langcode => [
              [
                'value' => $body,
                'format' => 'full_html',
              ],
            ],
          ],
          'uid' => 1,
          'status' => 1,
          'created' => REQUEST_TIME - mt_rand(0, $time_range),
        ]);

        $node->save();

        // Add URL alias if required.
        if ($add_alias) {
          $path_alias = [
            'source' => '/node/' . $node->nid,
            'alias' => '/generated-' . strtolower($type) . '-' . $node->nid,
          ];
          path_save($path_alias); // Pass array directly without reference.
        }


        // Add comments if required.
        if ($max_comments > 0 && $node->comment == COMMENT_NODE_OPEN) {
          for ($c = 0; $c < $max_comments; $c++) {
            $comment = new Comment([
              'nid' => $node->nid,
              'uid' => 1,
              'subject' => t('Generated Comment'),
              'comment_body' => [
                $langcode => [
                  [
                    'value' => 'This is a generated comment.',
                    'format' => 'plain_text',
                  ],
                ],
              ],
              'status' => 1,
              'created' => REQUEST_TIME - mt_rand(0, 3600),
            ]);
            $comment->save();
          }
        }

        $total_created++;
      } catch (Exception $e) {
        watchdog('openai_devel', 'Error: @message', ['@message' => $e->getMessage()], WATCHDOG_ERROR);
      }
    }
  }

  return $total_created;
}

/**
 * Clean the body text by removing unnecessary artifacts.
 */
function openai_devel_extract_title_and_body($response) {
  // Split the response into lines.
  $lines = explode("\n", $response);

  // Assume the first non-empty line is the title.
  $title = '';
  foreach ($lines as $line) {
    $line = trim($line);
    if (!empty($line)) {
      $title = $line;
      break;
    }
  }

  // Remove artifacts like "Title:" or "The title is".
  $title = preg_replace('/\btitle\b/i', '', $title);
  $title = preg_replace('/[:\-]+$/', '', $title); // Remove trailing punctuation.

  // Rejoin the remaining lines as the body.
  $body = implode("\n", array_slice($lines, 1));

  return [trim($title), trim($body)];
}
