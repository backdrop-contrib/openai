<?php

/**
 * Implements hook_menu().
 */
function openai_devel_menu() {
  $items = [];

  $items['admin/devel/generate/content-gpt'] = [
    'title' => 'Generate content from ChatGPT',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_devel_generate_content_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Form for generating content using OpenAI's GPT services.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The form array.
 */
function openai_devel_generate_content_form($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];

  if (empty($apiKey)) {
    backdrop_set_message(
      t('API key is not set. Please configure the API key in OpenAI settings.'),
      'error'
    );
    return;
  }

  $form['openai_model'] = [
    '#type' => 'select',
    '#title' => t('Model'),
    '#options' => [
      'gpt-3.5-turbo' => 'gpt-3.5-turbo',
      'gpt-4' => 'gpt-4',
    ],
    '#default_value' => 'gpt-3.5-turbo',
    '#description' => t('Select which model to use to generate text.'),
    '#required' => TRUE,
  ];

  $form['openai_system'] = [
    '#type' => 'textarea',
    '#title' => t('Profile'),
    '#default_value' => 'Your task is to generate content. I would like you to generate content about various topics.',
    '#description' => t('The "system profile" helps set the behavior of the ChatGPT response.'),
    '#required' => TRUE,
  ];

  $form['openai_temperature'] = [
    '#type' => 'number',
    '#title' => t('Temperature'),
    '#min' => 0,
    '#max' => 2,
    '#step' => .1,
    '#default_value' => '0.7',
    '#description' => t('Sampling temperature to use, between 0 and 2. Higher values make output more random.'),
  ];

  $form['openai_max_tokens'] = [
    '#type' => 'number',
    '#title' => t('Max tokens'),
    '#min' => 1,
    '#default_value' => '512',
    '#description' => t("The maximum number of tokens to generate in the response."),
  ];

  $form['openai_html'] = [
    '#type' => 'checkbox',
    '#title' => t('HTML formatted'),
    '#default_value' => FALSE,
    '#description' => t('If TRUE, OpenAI will format the replies in basic HTML.'),
  ];

  // Adding original devel_generate fields
  $options = array();
  $types = node_type_get_types();
  $suffix = '';
  foreach ($types as $type) {
    if (module_exists('comment')) {
      $default = $type->settings['comment_default'];
      $map = array(t('Hidden'), t('Closed'), t('Open'));
      $suffix = ' <small>('. t('Comments: ') . $map[$default]. ')</small>';
    }
    $options[$type->type] = t($type->name) . $suffix;
  }

  if (empty($options)) {
    backdrop_set_message(t('You do not have any content types that can be generated. <a href="@create-type">Go create a new content type</a> already!</a>', array('@create-type' => url('admin/structure/types/add'))), 'error', FALSE);
    return $form;
  }

  $form['node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => $options,
    '#default_value' => array_keys($options),
  );
  if (module_exists('checkall')) $form['node_types']['#checkall'] = TRUE;

  $form['kill_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('<strong>Delete all content</strong> in these content types before generating new content.'),
    '#default_value' => FALSE,
  );

  $form['num_nodes'] = array(
    '#type' => 'number',
    '#title' => t('How many nodes would you like to generate?'),
    '#default_value' => 50,
    '#min' => 1,
    '#max' => 999999,
  );

  $options = array(1 => t('Now'));
  foreach (array(3600, 86400, 604800, 2592000, 31536000) as $interval) {
    $options[$interval] = format_interval($interval, 1) . ' ' . t('ago');
  }
  $form['time_range'] = array(
    '#type' => 'select',
    '#title' => t('How far back in time should the nodes be dated?'),
    '#description' => t('Node creation dates will be distributed randomly from the current time, back to the selected time.'),
    '#options' => $options,
    '#default_value' => 31536000,
  );

  $form['max_comments'] = array(
    '#type' => module_exists('comment') ? 'number' : 'value',
    '#title' => t('Maximum number of comments per node.'),
    '#description' => t('Only content types that have comments enabled will receive comments. Note that some nodes will randomly receive zero comments. Some will receive the max.'),
    '#default_value' => 0,
    '#min' => 0,
    '#max' => 99999,
    '#access' => module_exists('comment'),
  );

  $form['title_length'] = array(
    '#type' => 'number',
    '#title' => t('Maximum number of words in titles'),
    '#default_value' => 4,
    '#min' => 1,
    '#max' => 100,
  );

  $form['add_alias'] = array(
    '#type' => 'checkbox',
    '#disabled' => !module_exists('path'),
    '#description' => t('Content types will use the default patterns when generated. Checking this box will add a custom alias to all content types that do not have a pattern specified.'),
    '#title' => t('Ensure all content has a URL alias.'),
    '#default_value' => FALSE,
  );

  unset($options);
  $options[LANGUAGE_NONE] = t('Language neutral');
  if (module_exists('locale')) {
    $languages = language_list(TRUE);
    foreach ($languages as $language) {
      $options[$language->langcode] = $language->name;
    }
  }
  $form['add_language'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Set language on nodes'),
    '#multiple' => TRUE,
    '#access' => module_exists('locale'),
    '#description' => t('Requires locale.module'),
    '#options' => $options,
    '#default_value' => array(LANGUAGE_NONE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * FormAPI submission to generate nodes.
 */
function openai_devel_generate_content_form_submit($form, &$form_state) {
  $config = config_get('openai.settings');
  $apiKey = $config['api_key'];
  $api = new OpenAIApi($apiKey);

  $model = $form_state['values']['openai_model'];
  $system = $form_state['values']['openai_system'];
  $temperature = $form_state['values']['openai_temperature'];
  $max_tokens = $form_state['values']['openai_max_tokens'];
  $html = $form_state['values']['openai_html'];

  // Get the selected node types and the number of nodes to generate.
  $node_types = array_filter($form_state['values']['node_types']);
  $num_nodes = $form_state['values']['num_nodes'];
  $created_nodes = 0;

  foreach ($node_types as $type) {
    for ($i = 0; $i < $num_nodes; $i++) {
      // Adding more variation to the prompts
      $unique_prompt = "Generate unique and relevant content for a {$type} node. ";
      $unique_prompt .= "Title it appropriately, followed by several paragraphs of engaging text. ";
      $unique_prompt .= "Make this one different from any others generated so far.";

      // Create a unique system message for each node
      $system_variation = $system . " This is node number " . ($i + 1) . " for the content type '{$type}'.";

      try {
        $response = $api->chat(
          $model,
          [
            ['role' => 'system', 'content' => $system_variation],
            ['role' => 'user', 'content' => $unique_prompt]
          ],
          $temperature,
          $max_tokens
        );

        // Process response
        $output = $html ? filter_xss($response) : check_plain($response);
        list($title, $body) = openai_devel_extract_title_and_body($output);

        // Clean up the title and body content
        $title = openai_devel_unsupported_characters($title);
        $body = openai_devel_unsupported_characters($body);

        // Create node
        $values = [
          'type' => $type,
          'title' => truncate_utf8($title, 255, TRUE, TRUE),
          'body' => [
            LANGUAGE_NONE => [
              0 => [
                'value' => truncate_utf8($body, 2000, TRUE, TRUE),
                'format' => $html ? 'full_html' : 'plain_text',
              ],
            ],
          ],
          'uid' => 1,
          'status' => 1,
          'comment' => 0,
          'last_comment_timestamp' => REQUEST_TIME,
          'last_comment_name' => '',
          'last_comment_uid' => 0,
          'comment_count' => 0,
          'promote' => 0,
          'sticky' => 0,
          'created' => REQUEST_TIME,
        ];
        $node = entity_create('node', $values);
        $node->save();
        $created_nodes++;
      } catch (Exception $e) {
        form_set_error('', t('Error generating content: @message', ['@message' => $e->getMessage()]));
      }
    }
  }

  backdrop_set_message(t('@num node(s) created.', ['@num' => $created_nodes]));

}

/**
 * Extracts the title and body from the OpenAI response.
 */
function openai_devel_extract_title_and_body($output) {
  // Assuming the title is the first line ending with a period, followed by body content
  $lines = explode("\n", $output);
  $title = trim(array_shift($lines));

  // Remove "Title: " prefix if present
  if (strpos($title, 'Title: ') === 0) {
    $title = substr($title, 7);
  }

  $body = implode("\n", $lines);
  return [$title, $body];
}

/**
 * Removes unsupported characters from the string.
 */
function openai_devel_unsupported_characters($string) {
  return preg_replace('/[^\x20-\x7E]/', '', $string);
}














