<?php

/**
 * Implements hook_schema().
 */
function openai_embeddings_schema() {
  $schema['openai_embeddings'] = [
    'description' => 'Stores embedding data from OpenAI in Backdrop CMS.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The openai_search record ID.',
      ],
      'entity_id' => [
        'description' => 'The entity id this record affects (1, 2, 3).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The entity type (node, paragraph, user, etc).',
      ],
      'bundle' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The entity bundle.',
      ],
      'field_name' => [
        'type' => 'varchar',
        'length' => 128,
        'description' => 'The field name the embedding was generated from (title, field_body, etc).',
      ],
      'field_delta' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The field delta position this embedding was generated from.',
      ],
      'embedding' => [
        'type' => 'text', // Backdrop does not support JSON data types natively.
        'size' => 'big',
        'description' => 'The embedding values from OpenAI.',
      ],
      'data' => [
        'type' => 'text', // Backdrop does not support JSON data types natively.
        'size' => 'big',
        'description' => 'Usage and misc data returned from OpenAI.',
      ],
    ],
    'primary key' => [
      'id',
    ],
    'indexes' => [
      'entity_id' => [
        'entity_id',
      ],
      'entity_type' => [
        'entity_type',
      ],
      'bundle' => [
        'bundle',
      ],
      'field_name' => [
        'field_name',
      ],
      'field_delta' => [
        'field_delta',
      ],
    ],
  ];

  return $schema;
}

/**
 * Move pinecone configuration to mapped embeddings configuration.
 */
function openai_embeddings_update_10002() {
  $pinecone_config = config_get('openai_embeddings.pinecone_client');
  if ($pinecone_config) {
    $embeddings_config = config_get('openai_embeddings.settings');
    $embeddings_config['vector_clients']['pinecone']['hostname'] = $pinecone_config['hostname'];
    $embeddings_config['vector_clients']['pinecone']['api_key'] = $pinecone_config['api_key'];
    $embeddings_config['vector_clients']['pinecone']['disable_namespace'] = $pinecone_config['disable_namespace'];
    config_set('openai_embeddings.settings', $embeddings_config);

    // Delete the original pinecone config.
    config_set('openai_embeddings.pinecone_client', NULL);
  }
}

/**
 * Allow disabling of namespace, maintain status quo of false.
 */
function openai_embeddings_update_10003() {
  $config = config_get('openai_embeddings.settings');
  if (!empty($config['vector_clients']['pinecone']['disable_namespace'])) {
    unset($config['vector_clients']['pinecone']['disable_namespace']);
    config_set('openai_embeddings.settings', $config);
  }
}

/**
 * Clear cache of models list given change to filters.
 */
function openai_embeddings_update_10004() {
  cache_clear_all('openai_models', 'cache');
}

/**
 * Implements hook_uninstall().
 */
function openai_embeddings_uninstall() {
  // Delete configuration.
  config('openai_embeddings.settings')->delete();

  // Drop the table.
  try {
    db_drop_table('openai_embeddings');
  }
  catch (Exception $e) {
    watchdog('openai_embeddings', 'Failed to drop the table "openai_embeddings": @message', ['@message' => $e->getMessage()], WATCHDOG_WARNING);
  }
}