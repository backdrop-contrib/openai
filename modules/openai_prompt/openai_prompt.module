<?php

/**
 * Implements hook_permission().
 */
function openai_prompt_permission() {
  return array(
    'access openai prompt' => array(
      'title' => t('Access OpenAI Prompt'),
      'description' => t('Allow users to access the OpenAI prompt form.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function openai_prompt_menu() {
  $items = array();

  $items['admin/config/openai/openai-prompt'] = array(
    'title' => 'Prompt Explorer',
    'description' => 'Explore OpenAI prompts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('openai_prompt_form'),
    'access arguments' => array('access openai prompt'),
    'parent' => 'admin/config/openai',
  );

  return $items;
}

/**
 * Defines a form to prompt OpenAI for answers.
 */
function openai_prompt_form($form, &$form_state) {
  $config = config('openai.settings');
  $apiKey = $config->get('api_key');

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return $form;
  }

  $api = new OpenAIApi($apiKey); // Ensure this matches the constructor expectation.
  // Continue with form definition as usual
  $form['prompt'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter your prompt here. When submitted, OpenAI will generate a response. Please note that each query counts against your API usage for OpenAI.'),
    '#description' => t('Based on the complexity of your prompt, OpenAI traffic, and other factors, a response can sometimes take up to 10-15 seconds to complete. Please allow the operation to finish.'),
    '#required' => TRUE,
  );

  $models = $api->filterModels(['text']);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#description' => t('Set various options related to how ChatGPT generates its response.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['options']['model'] = array(
    '#type' => 'select',
    '#title' => t('Model to use'),
    '#options' => $models,
    '#default_value' => 'text-davinci-003',
    '#description' => t('Select which model to use to analyze text. See the <a href=":link">model overview</a> for details about each model.', ['@link' => 'https://platform.openai.com/docs/models']),
  );

  $form['options']['temperature'] = array(
    '#type' => 'textfield',
    '#title' => t('Temperature'),
    '#default_value' => '0.4',
    '#description' => t('What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.'),
  );

  $form['options']['max_tokens'] = array(
    '#type' => 'textfield',
    '#title' => t('Max tokens'),
    '#default_value' => '128',
    '#description' => t('The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model\'s context length.'),
  );

  $form['response'] = array(
    '#type' => 'textarea',
    '#title' => t('Response from OpenAI'),
    '#attributes' => array('readonly' => 'readonly'),
    '#prefix' => '<div id="openai-prompt-response">',
    '#suffix' => '</div>',
    '#description' => t('The response from OpenAI will appear in the textbox above.')
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Ask OpenAI'),
  );

  return $form;
}

/**
 * Form submit handler.
 */
function openai_prompt_form_submit($form, &$form_state) {
  $config = config('openai.settings');
  $apiKey = $config->get('api_key');

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return;
  }

  $prompt = $form_state['values']['prompt'];
  $model = $form_state['values']['model'];
  $temperature = $form_state['values']['temperature'];
  $max_tokens = $form_state['values']['max_tokens'];

  // Now pass the API key to the constructor
  $api = new OpenAIApi($apiKey);
  $response = $api->completions($model, $prompt, $temperature, $max_tokens);

  $form_state['response']['#value'] = trim($response) ?? t('No answer was provided.');
  form_set_value($form['response'], $form_state['response']['#value'], $form_state);
}




