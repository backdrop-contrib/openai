<?php

/**
 * @file
 * Permissions for the OpenAI TTS module.
 */

function openai_tts_permission() {
  return [
    'access openai tts' => [
      'title' => t('Use OpenAI text to speech module.'),
    ],
  ];
}


/**
 * Implements hook_menu().
 */
function openai_tts_menu() {
$items = [];

$items['admin/config/openai/tts'] = [
    'title' => 'OpenAI Text-to-Speech',
    'description' => 'A form to convert text to speech using the OpenAI API.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['openai_tts_form'],
    'access callback' => 'user_access',
    'access arguments' => ['administer site configuration'],
    'parent' => 'admin/config/openai',
];

return $items;
}

  /**
   * Form constructor for the OpenAI TTS form.
   */
function openai_tts_form($form, &$form_state) {
  $form = [];
  $form['#config'] = 'openai_tts.settings';

  // Retrieve the API key
  $openai_config = config('openai.settings');
  $apiKey = key_get_key_value($openai_config->get('api_key'));

  if (empty($apiKey)) {
    form_set_error('', t('API key is not set. Please configure the API key in OpenAI settings.'));
    return $form;
  }

  $api = new OpenAIApi($apiKey);

  // Form fields
  $form['text'] = [
    '#type' => 'textarea',
    '#title' => t('Text to convert'),
    '#description' => t('The text to turn into speech.'),
    '#required' => TRUE,
  ];

  // Get TTS models
  $models = $api->filterModels(['tts']);
  $form['model'] = [
    '#type' => 'select',
    '#title' => t('Model'),
    '#options' => $models,
    '#default_value' => 'tts-1',
    '#description' => t('The model to use to turn text into speech. See the <a href="@link" target="_blank">link</a> for more information.', ['@link' => 'https://platform.openai.com/docs/models/tts']),
  ];

  // Voice selection
  $form['voice'] = [
    '#type' => 'select',
    '#title' => t('Voice'),
    '#options' => [
      'alloy' => 'Alloy',
      'echo' => 'Echo',
      'fable' => 'Fable',
      'onyx' => 'Onyx',
      'nova' => 'Nova',
      'shimmer' => 'Shimmer',
    ],
    '#default_value' => 'alloy',
    '#description' => t('The voice to use to turn text into speech.'),
  ];

  // Response format
  $form['response_format'] = [
    '#type' => 'select',
    '#title' => t('Response Format'),
    '#options' => [
      'mp3' => 'MP3',
      'opus' => 'Opus',
      'aac' => 'AAC',
      'flac' => 'FLAC',
    ],
    '#default_value' => 'mp3',
    '#description' => t('The audio format of the result.'),
  ];

  // Placeholder for the response file link
  $form['file'] = [
    '#prefix' => '<div id="openai-tts-response">',
    '#suffix' => '</div>',
  ];

  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => [
      'callback' => 'openai_tts_get_response',
      'wrapper' => 'openai-tts-response',
      'progress' => ['type' => 'throbber'],
    ],
  ];

  return $form;
}

  /**
   * Form validation for the OpenAI TTS form.
   */
  function openai_tts_form_validate($form, &$form_state) {
    $text = $form_state['values']['text'];

    if (mb_strlen($text) > 4096) {
      form_set_error('text', t('The input cannot exceed 4096 characters.'));
    }
  }

  /**
   * AJAX callback for the OpenAI TTS response.
   */
  function openai_tts_get_response($form, &$form_state) {
    // Check if 'storage' is set and contains the required information.
    if (!empty($form_state['storage']['filepath']) && !empty($form_state['storage']['filename'])) {
      $file_url = file_create_url($form_state['storage']['filepath']);
      // Use direct HTML for the link to ensure it renders as clickable.
      $form['file']['#markup'] = t('Download the file: <a href="@url" target="_blank">@filename</a>', [
        '@url' => $file_url,
        '@filename' => $form_state['storage']['filename'],
      ]);
    } else {
      $form['file']['#markup'] = t('File link is unavailable.');
    }

    return $form['file'];
  }



 /**
 * Form submission handler for the OpenAI TTS form.
 */
function openai_tts_form_submit($form, &$form_state) {
  $openai_config = config('openai.settings');
  $apiKey = key_get_key_value(config('openai.settings')->get('api_key'));
  $api = new OpenAIApi($apiKey);

  $text = $form_state['values']['text'];
  $model = $form_state['values']['model'];
  $voice = $form_state['values']['voice'];
  $format = $form_state['values']['response_format'];

  $filename = 'tts_result-' . REQUEST_TIME . '.' . $format;
  $file_uri = file_unmanaged_save_data($api->textToSpeech($model, $text, $voice, $format), 'public://' . $filename, FILE_EXISTS_REPLACE);

  if ($file_uri) {
    $file_url = file_create_url($file_uri);
    $form_state['storage']['filepath'] = $file_uri;
    $form_state['storage']['filename'] = $filename;
    $form['file']['#markup'] = t('Download the file: <a href="@url">@filename</a>', ['@url' => $file_url, '@filename' => $filename]);
  } else {
    form_set_error('', t('Failed to save the audio file.'));
  }

  $form_state['rebuild'] = TRUE;
}
